=begin
#Optimizers API

# Unified API for multiple optimizer engines dedicated to Vehicle Routing Problems  Its purpose is to provide a complete chain for the resolution. From a provided VRP, it requires a distance matrix, solve the problem and prepare a self sufficient result.  Please check the Github Wiki for more details: [https://github.com/Mapotempo/optimizer-api/wiki](https://github.com/Mapotempo/optimizer-api/wiki) 

OpenAPI spec version: 0.1.5
Contact: tech@mapotempo.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.12

=end

require 'spec_helper'
require 'json'

# Unit tests for OptimizerClient::VrpApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'VrpApi' do
  before do
    # run before each test
    @instance = OptimizerClient::VrpApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of VrpApi' do
    it 'should create an instance of VrpApi' do
      expect(@instance).to be_instance_of(OptimizerClient::VrpApi)
    end
  end

  # unit tests for delete_job
  # Delete vrp job
  # Kill the job. This operation may have delay, since if the job is working it will be killed during the next iteration.
  # @param id Job id returned by creating VRP problem.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_job test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_job
  # Fetch vrp job status
  # Get the job status and details, contains progress avancement. Return the best actual solutions currently found.
  # @param id Job id returned by creating VRP problem.
  # @param [Hash] opts the optional parameters
  # @return [VrpResult]
  describe 'get_job test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_job_list
  # List vrp jobs
  # List running or queued jobs.
  # @param [Hash] opts the optional parameters
  # @return [VrpJobsList]
  describe 'get_job_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for submit_vrp
  # Submit VRP problem
  # Submit vehicle routing problem. If the problem can be quickly solved, the solution is returned in the response. In other case, the response provides a job identifier in a queue: you need to perfom another request to fetch vrp job status and solution.
  # @param _01_vrp_submit 
  # @param [Hash] opts the optional parameters
  # @return [VrpResult]
  describe 'submit_vrp test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
