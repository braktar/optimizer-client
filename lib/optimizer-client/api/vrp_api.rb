=begin
#Optimizers API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 0.1.0
Contact: tech@mapotempo.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.12

=end

require 'uri'

module OptimizerClient
  class VrpApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete vrp job
    # Kill the job. This operation may have delay, since if the job is working it will be killed during the next iteration.
    # @param id Job id returned by creating VRP problem.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_job(id, opts = {})
      delete_job_with_http_info(id, opts)
      nil
    end

    # Delete vrp job
    # Kill the job. This operation may have delay, since if the job is working it will be killed during the next iteration.
    # @param id Job id returned by creating VRP problem.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_job_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VrpApi.delete_job ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling VrpApi.delete_job"
      end
      # resource path
      local_var_path = '/0.1/vrp/jobs/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json; charset=UTF-8', 'application/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VrpApi#delete_job\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch vrp job status
    # Get the job status and details, contains progress avancement. Return the best actual solutions currently found.
    # @param id Job id returned by creating VRP problem.
    # @param [Hash] opts the optional parameters
    # @return [VrpResult]
    def job(id, opts = {})
      data, _status_code, _headers = job_with_http_info(id, opts)
      data
    end

    # Fetch vrp job status
    # Get the job status and details, contains progress avancement. Return the best actual solutions currently found.
    # @param id Job id returned by creating VRP problem.
    # @param [Hash] opts the optional parameters
    # @return [Array<(VrpResult, Fixnum, Hash)>] VrpResult data, response status code and response headers
    def job_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VrpApi.job ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling VrpApi.job"
      end
      # resource path
      local_var_path = '/0.1/vrp/jobs/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json; charset=UTF-8', 'application/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key_query_param']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VrpResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VrpApi#job\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List vrp jobs
    # List running or queued jobs.
    # @param [Hash] opts the optional parameters
    # @return [VrpJobsList]
    def list_jobs(opts = {})
      data, _status_code, _headers = list_jobs_with_http_info(opts)
      data
    end

    # List vrp jobs
    # List running or queued jobs.
    # @param [Hash] opts the optional parameters
    # @return [Array<(VrpJobsList, Fixnum, Hash)>] VrpJobsList data, response status code and response headers
    def list_jobs_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VrpApi.list_jobs ...'
      end
      # resource path
      local_var_path = '/0.1/vrp/jobs'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json; charset=UTF-8', 'application/xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VrpJobsList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VrpApi#list_jobs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Submit VRP problem
    # Submit vehicle routing problem. If the problem can be quickly solved, the solution is returned in the response. In other case, the response provides a job identifier in a queue: you need to perfom another request to fetch vrp job status and solution.
    # @param _01_vrp_submit 
    # @param [Hash] opts the optional parameters
    # @return [VrpResult]
    def vrp(_01_vrp_submit, opts = {})
      data, _status_code, _headers = vrp_with_http_info(_01_vrp_submit, opts)
      data
    end

    # Submit VRP problem
    # Submit vehicle routing problem. If the problem can be quickly solved, the solution is returned in the response. In other case, the response provides a job identifier in a queue: you need to perfom another request to fetch vrp job status and solution.
    # @param _01_vrp_submit 
    # @param [Hash] opts the optional parameters
    # @return [Array<(VrpResult, Fixnum, Hash)>] VrpResult data, response status code and response headers
    def vrp_with_http_info(_01_vrp_submit, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VrpApi.vrp ...'
      end
      # verify the required parameter '_01_vrp_submit' is set
      if @api_client.config.client_side_validation && _01_vrp_submit.nil?
        fail ArgumentError, "Missing the required parameter '_01_vrp_submit' when calling VrpApi.vrp"
      end
      # resource path
      local_var_path = '/0.1/vrp/submit'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json; charset=UTF-8', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(_01_vrp_submit)
      auth_names = ['api_key_query_param']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VrpResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VrpApi#vrp\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
