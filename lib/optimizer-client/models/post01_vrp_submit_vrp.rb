=begin
#Optimizers API

#Unified API for multiple optimizer engines dedicated to Vehicle Routing Problems

OpenAPI spec version: 0.1.0
Contact: tech@mapotempo.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.12

=end

require 'date'

module OptimizerClient
  class Post01VrpSubmitVrp
    # Name of the problem, used as tag for all element in order to name plan when importing returned .csv file
    attr_accessor :name

    # Define all the distances between each point of problem
    attr_accessor :matrices

    # Particular place in the map
    attr_accessor :points

    # The name of a Capacity/Quantity
    attr_accessor :units

    # Break within a vehicle tour
    attr_accessor :rests

    # 
    attr_accessor :zones

    # Usually represent a work day of a particular driver/vehicle
    attr_accessor :vehicles

    # Independent activity, which does not require a context
    attr_accessor :services

    # Link directly one activity of collection to another of drop off
    attr_accessor :shipments

    # 
    attr_accessor :relations

    # 
    attr_accessor :subtours

    # 
    attr_accessor :routes

    attr_accessor :configuration

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'name' => :'name',
        :'matrices' => :'matrices',
        :'points' => :'points',
        :'units' => :'units',
        :'rests' => :'rests',
        :'zones' => :'zones',
        :'vehicles' => :'vehicles',
        :'services' => :'services',
        :'shipments' => :'shipments',
        :'relations' => :'relations',
        :'subtours' => :'subtours',
        :'routes' => :'routes',
        :'configuration' => :'configuration'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'name' => :'String',
        :'matrices' => :'Array<Post01VrpSubmitVrpMatrices>',
        :'points' => :'Array<Post01VrpSubmitVrpPoints>',
        :'units' => :'Array<Post01VrpSubmitVrpUnits>',
        :'rests' => :'Array<Post01VrpSubmitVrpRests>',
        :'zones' => :'Array<Post01VrpSubmitVrpZones>',
        :'vehicles' => :'Array<Post01VrpSubmitVrpVehicles>',
        :'services' => :'Array<Post01VrpSubmitVrpServices>',
        :'shipments' => :'Array<Post01VrpSubmitVrpShipments>',
        :'relations' => :'Array<Post01VrpSubmitVrpRelations>',
        :'subtours' => :'Array<Post01VrpSubmitVrpSubtours>',
        :'routes' => :'Array<Post01VrpSubmitVrpRoutes>',
        :'configuration' => :'Post01VrpSubmitVrpConfiguration'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'matrices')
        if (value = attributes[:'matrices']).is_a?(Array)
          self.matrices = value
        end
      end

      if attributes.has_key?(:'points')
        if (value = attributes[:'points']).is_a?(Array)
          self.points = value
        end
      end

      if attributes.has_key?(:'units')
        if (value = attributes[:'units']).is_a?(Array)
          self.units = value
        end
      end

      if attributes.has_key?(:'rests')
        if (value = attributes[:'rests']).is_a?(Array)
          self.rests = value
        end
      end

      if attributes.has_key?(:'zones')
        if (value = attributes[:'zones']).is_a?(Array)
          self.zones = value
        end
      end

      if attributes.has_key?(:'vehicles')
        if (value = attributes[:'vehicles']).is_a?(Array)
          self.vehicles = value
        end
      end

      if attributes.has_key?(:'services')
        if (value = attributes[:'services']).is_a?(Array)
          self.services = value
        end
      end

      if attributes.has_key?(:'shipments')
        if (value = attributes[:'shipments']).is_a?(Array)
          self.shipments = value
        end
      end

      if attributes.has_key?(:'relations')
        if (value = attributes[:'relations']).is_a?(Array)
          self.relations = value
        end
      end

      if attributes.has_key?(:'subtours')
        if (value = attributes[:'subtours']).is_a?(Array)
          self.subtours = value
        end
      end

      if attributes.has_key?(:'routes')
        if (value = attributes[:'routes']).is_a?(Array)
          self.routes = value
        end
      end

      if attributes.has_key?(:'configuration')
        self.configuration = attributes[:'configuration']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @vehicles.nil?
        invalid_properties.push('invalid value for "vehicles", vehicles cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @vehicles.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          name == o.name &&
          matrices == o.matrices &&
          points == o.points &&
          units == o.units &&
          rests == o.rests &&
          zones == o.zones &&
          vehicles == o.vehicles &&
          services == o.services &&
          shipments == o.shipments &&
          relations == o.relations &&
          subtours == o.subtours &&
          routes == o.routes &&
          configuration == o.configuration
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [name, matrices, points, units, rests, zones, vehicles, services, shipments, relations, subtours, routes, configuration].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = OptimizerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
