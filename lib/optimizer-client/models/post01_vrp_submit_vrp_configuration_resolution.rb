=begin
#Optimizers API

# Unified API for multiple optimizer engines dedicated to Vehicle Routing Problems  Its purpose is to provide a complete chain for the resolution. From a provided VRP, it requires a distance matrix, solve the problem and prepare a self sufficient result.  Please check the Github Wiki for more details: [https://github.com/Mapotempo/optimizer-api/wiki](https://github.com/Mapotempo/optimizer-api/wiki) 

OpenAPI spec version: 0.1.5
Contact: tech@mapotempo.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.12

=end

require 'date'

module OptimizerClient
  # Parameters used to stop the search
  class Post01VrpSubmitVrpConfigurationResolution
    # Maximum duration of resolution
    attr_accessor :duration

    # Maximum number of iterations (Jsprit only)
    attr_accessor :iterations

    # Maximum number of iterations without improvment from the best solution already found
    attr_accessor :iterations_without_improvment

    # maximum number of iterations without variation in the solve bigger than the defined coefficient (Jsprit only)
    attr_accessor :stable_iterations

    # variation coefficient related to stable_iterations (Jsprit only)
    attr_accessor :stable_coefficient

    # Minimum solve duration before the solve could stop (x10 in order to find the first solution) (ORtools only)
    attr_accessor :minimum_duration

    # the solve could stop itself if the solve duration without finding a new solution is greater than the time currently elapsed multiplicate by this parameter (ORtools only)
    attr_accessor :time_out_multiplier

    # Limit the maxiumum number of vehicles within a solution. Not available with periodic heuristic.
    attr_accessor :vehicle_limit

    # Defines if solver should be called.
    attr_accessor :solver

    # [planning] Forces all services with the same point_id to take place on the same days. Only available if first_solution_strategy is periodic is activated. Not available ORtools.
    attr_accessor :same_point_day

    # [planning] Assumes solution is valid even if only a subset of one service's visits are affected. Default: true. Not available ORtools.
    attr_accessor :allow_partial_assignment

    # Give the current number of process for block call
    attr_accessor :split_number

    # Takes the solution provided through relations of type order and computes solution cost and time/distance associated values (Ortools only). Not available for scheduling yet.
    attr_accessor :evaluate_only

    # Return several solution computed with different matrices
    attr_accessor :several_solutions

    # Compute each heuristic solution
    attr_accessor :batch_heuristic

    # Value of the ratio that will change the matrice
    attr_accessor :variation_ratio

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'duration' => :'duration',
        :'iterations' => :'iterations',
        :'iterations_without_improvment' => :'iterations_without_improvment',
        :'stable_iterations' => :'stable_iterations',
        :'stable_coefficient' => :'stable_coefficient',
        :'minimum_duration' => :'minimum_duration',
        :'time_out_multiplier' => :'time_out_multiplier',
        :'vehicle_limit' => :'vehicle_limit',
        :'solver' => :'solver',
        :'same_point_day' => :'same_point_day',
        :'allow_partial_assignment' => :'allow_partial_assignment',
        :'split_number' => :'split_number',
        :'evaluate_only' => :'evaluate_only',
        :'several_solutions' => :'several_solutions',
        :'batch_heuristic' => :'batch_heuristic',
        :'variation_ratio' => :'variation_ratio'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'duration' => :'Integer',
        :'iterations' => :'Integer',
        :'iterations_without_improvment' => :'Integer',
        :'stable_iterations' => :'Integer',
        :'stable_coefficient' => :'Float',
        :'minimum_duration' => :'Integer',
        :'time_out_multiplier' => :'Integer',
        :'vehicle_limit' => :'Integer',
        :'solver' => :'BOOLEAN',
        :'same_point_day' => :'BOOLEAN',
        :'allow_partial_assignment' => :'BOOLEAN',
        :'split_number' => :'Integer',
        :'evaluate_only' => :'BOOLEAN',
        :'several_solutions' => :'Integer',
        :'batch_heuristic' => :'BOOLEAN',
        :'variation_ratio' => :'Integer'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'duration')
        self.duration = attributes[:'duration']
      end

      if attributes.has_key?(:'iterations')
        self.iterations = attributes[:'iterations']
      end

      if attributes.has_key?(:'iterations_without_improvment')
        self.iterations_without_improvment = attributes[:'iterations_without_improvment']
      end

      if attributes.has_key?(:'stable_iterations')
        self.stable_iterations = attributes[:'stable_iterations']
      end

      if attributes.has_key?(:'stable_coefficient')
        self.stable_coefficient = attributes[:'stable_coefficient']
      end

      if attributes.has_key?(:'minimum_duration')
        self.minimum_duration = attributes[:'minimum_duration']
      end

      if attributes.has_key?(:'time_out_multiplier')
        self.time_out_multiplier = attributes[:'time_out_multiplier']
      end

      if attributes.has_key?(:'vehicle_limit')
        self.vehicle_limit = attributes[:'vehicle_limit']
      end

      if attributes.has_key?(:'solver')
        self.solver = attributes[:'solver']
      else
        self.solver = true
      end

      if attributes.has_key?(:'same_point_day')
        self.same_point_day = attributes[:'same_point_day']
      end

      if attributes.has_key?(:'allow_partial_assignment')
        self.allow_partial_assignment = attributes[:'allow_partial_assignment']
      else
        self.allow_partial_assignment = true
      end

      if attributes.has_key?(:'split_number')
        self.split_number = attributes[:'split_number']
      end

      if attributes.has_key?(:'evaluate_only')
        self.evaluate_only = attributes[:'evaluate_only']
      end

      if attributes.has_key?(:'several_solutions')
        self.several_solutions = attributes[:'several_solutions']
      end

      if attributes.has_key?(:'batch_heuristic')
        self.batch_heuristic = attributes[:'batch_heuristic']
      end

      if attributes.has_key?(:'variation_ratio')
        self.variation_ratio = attributes[:'variation_ratio']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          duration == o.duration &&
          iterations == o.iterations &&
          iterations_without_improvment == o.iterations_without_improvment &&
          stable_iterations == o.stable_iterations &&
          stable_coefficient == o.stable_coefficient &&
          minimum_duration == o.minimum_duration &&
          time_out_multiplier == o.time_out_multiplier &&
          vehicle_limit == o.vehicle_limit &&
          solver == o.solver &&
          same_point_day == o.same_point_day &&
          allow_partial_assignment == o.allow_partial_assignment &&
          split_number == o.split_number &&
          evaluate_only == o.evaluate_only &&
          several_solutions == o.several_solutions &&
          batch_heuristic == o.batch_heuristic &&
          variation_ratio == o.variation_ratio
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [duration, iterations, iterations_without_improvment, stable_iterations, stable_coefficient, minimum_duration, time_out_multiplier, vehicle_limit, solver, same_point_day, allow_partial_assignment, split_number, evaluate_only, several_solutions, batch_heuristic, variation_ratio].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = OptimizerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
